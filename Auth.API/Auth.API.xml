<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Auth.API</name>
    </assembly>
    <members>
        <member name="T:Auth.API.Controllers.SystemUsersController">
            <summary>
            SystemUsersController class provides REST API for handling System Users
            </summary>
        </member>
        <member name="M:Auth.API.Controllers.SystemUsersController.#ctor(Auth.API.Data.Repository.ISystemUserRepository,AutoMapper.IMapper)">
            <summary>
            Initializes a new instance of the SystemUsersController class
            </summary>
            <param name="systemUserRepository">An instance of ISystemUserRepository to handle the System Users</param>
            <param name="mapper">An instance of IMapper to map between System User entities and models</param>
        </member>
        <member name="M:Auth.API.Controllers.SystemUsersController.GetSystemUsers">
            <summary>
            Returns a list of System Users
            </summary>
            <returns>A list of System User models, or No Content if no System User found</returns>
        </member>
        <member name="M:Auth.API.Controllers.SystemUsersController.GetSystemUser(System.String)">
            <summary>
            Returns a specific System User based on the username
            </summary>
            <param name="username">The username of the System User to retrieve</param>
            <returns>The System User model, or Not Found if the System User is not found</returns>
        </member>
        <member name="M:Auth.API.Controllers.SystemUsersController.PatchSystemUser(System.String,Auth.API.Models.SystemUserUpdateModel)">
            <summary>
            Updates a specific System User based on the username
            </summary>
            <param name="username">The username of the System User to update</param>
            <param name="systemUserUpdate">The updated System User information</param>
            <returns>No Content if the System User is updated successfully, or Bad Request if the System User or the update information is invalid</returns>
        </member>
        <member name="M:Auth.API.Controllers.SystemUsersController.PostSystemUser(Auth.API.Models.SystemUserRequestModel)">
            <summary>
            Creates a new System User
            </summary>
            <param name="requestModel">The new System User information</param>
            <returns>The created System User model, with a location header pointing to the URL of the newly created System User</returns>
        </member>
        <member name="M:Auth.API.Controllers.SystemUsersController.DeleteSystemUser(System.String)">
            <summary>
            Deletes a specific System User based on the username
            </summary>
            <param name="username">The username of the System User to delete</param>
            <returns>No Content if the System User is deleted successfully, or Not Found if the System User is not found</returns>
        </member>
        <member name="T:Auth.API.Controllers.TokenController">
            <summary>
            TokenController class is responsible for generating and introspecting JWT tokens.
            </summary>
        </member>
        <member name="M:Auth.API.Controllers.TokenController.#ctor(Auth.API.Data.Repository.ISystemUserRepository,AutoMapper.IMapper)">
            <summary>
            Constructor for TokenController class.
            </summary>
            <param name="systemUserRepository">Reference to ISystemUserRepository instance.</param>
            <param name="mapper">Reference to IMapper instance.</param>
        </member>
        <member name="M:Auth.API.Controllers.TokenController.GenerateToken(Auth.API.Models.JwtTokenRequestModel)">
            <summary>
            Generates JWT token based on the given username and password.
            </summary>
            <param name="userParam">Model containing username and password.</param>
            <returns>JWT token response model if the authentication is successful, otherwise returns Bad Request.</returns>
        </member>
        <member name="M:Auth.API.Controllers.TokenController.IntrospectToken(Auth.API.Models.IntrospectionRequestModel)">
            <summary>
            Introspects the given JWT token.
            </summary>
            <param name="requestModel">Model containing the token to be introspected.</param>
            <returns>SystemUserResponseModel if the token is valid, otherwise returns Bad Request.</returns>
        </member>
        <member name="T:Auth.API.Data.Repository.ISystemUserRepository">
            <summary>
            Repository for managing SystemUser entities.
            </summary>
        </member>
        <member name="M:Auth.API.Data.Repository.ISystemUserRepository.GetAll">
            <summary>
            Gets all SystemUsers from the database.
            </summary>
            <returns>An asynchronous task that returns an enumerable of SystemUser entities.</returns>
        </member>
        <member name="M:Auth.API.Data.Repository.ISystemUserRepository.GetByGuid(System.Guid)">
            <summary>
            Gets a SystemUser by its Guid identifier.
            </summary>
            <param name="guid">The Guid identifier of the SystemUser.</param>
            <returns>An asynchronous task that returns the SystemUser entity with the specified Guid identifier, or null if no such entity exists.</returns>
        </member>
        <member name="M:Auth.API.Data.Repository.ISystemUserRepository.GetByUsername(System.String)">
            <summary>
            Gets a SystemUser by its username.
            </summary>
            <param name="username">The username of the SystemUser.</param>
            <returns>An asynchronous task that returns the SystemUser entity with the specified username, or null if no such entity exists.</returns>
        </member>
        <member name="M:Auth.API.Data.Repository.ISystemUserRepository.GetByCredentials(System.String,System.String)">
            <summary>
            Gets a SystemUser by its username and password.
            </summary>
            <param name="username">The username of the SystemUser.</param>
            <param name="password">The password of the SystemUser.</param>
            <returns>An asynchronous task that returns the SystemUser entity with the specified username and password, or null if no such entity exists.</returns>
        </member>
        <member name="M:Auth.API.Data.Repository.ISystemUserRepository.Add(Auth.API.Entities.SystemUser)">
            <summary>
            Adds a new SystemUser to the database.
            </summary>
            <param name="systemUser">The SystemUser entity to add to the database.</param>
            <returns>An asynchronous task that returns the added SystemUser entity.</returns>
        </member>
        <member name="M:Auth.API.Data.Repository.ISystemUserRepository.Update(Auth.API.Entities.SystemUser)">
            <summary>
            Updates an existing SystemUser in the database.
            </summary>
            <param name="systemUser">The SystemUser entity to update in the database.</param>
            <returns>An asynchronous task that returns the updated SystemUser entity.</returns>
        </member>
        <member name="M:Auth.API.Data.Repository.ISystemUserRepository.Delete(System.Guid)">
            <summary>
            Deletes a SystemUser from the database by its Guid identifier.
            </summary>
            <param name="guid">The Guid identifier of the SystemUser to delete.</param>
            <returns>An asynchronous task that represents the operation.</returns>
        </member>
        <member name="M:Auth.API.Data.Repository.ISystemUserRepository.Delete(System.String)">
            <summary>
            Deletes a SystemUser from the database by its username.
            </summary>
            <param name="username">The username of the SystemUser to delete.</param>
            <returns>An asynchronous task that represents the operation.</returns>
        </member>
        <member name="T:Auth.API.Data.Repository.SystemUserRepository">
            <summary>
            Implementation of the ISystemUserRepository
            interface for managing SystemUser entities in the database.
            </summary>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.#ctor(Auth.API.Data.AuthDbContext)">
            <summary>
            Initializes a new instance of the SystemUserRepository class.
            </summary>
            <param name="context">The database context to use for data access.</param>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.Add(Auth.API.Entities.SystemUser)">
            <inheritdoc cref="M:Auth.API.Data.Repository.ISystemUserRepository.GetAll"/>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.Delete(System.Guid)">
            <inheritdoc cref="M:Auth.API.Data.Repository.ISystemUserRepository.Delete(System.Guid)"/>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.Delete(System.String)">
            <inheritdoc cref="M:Auth.API.Data.Repository.ISystemUserRepository.Delete(System.String)"/>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.GetAll">
            <inheritdoc cref="M:Auth.API.Data.Repository.ISystemUserRepository.GetAll"/>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.GetByCredentials(System.String,System.String)">
            <inheritdoc cref="M:Auth.API.Data.Repository.ISystemUserRepository.GetByCredentials(System.String,System.String)"/>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.GetByGuid(System.Guid)">
            <inheritdoc cref="M:Auth.API.Data.Repository.ISystemUserRepository.GetByGuid(System.Guid)"/>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.GetByUsername(System.String)">
            <inheritdoc cref="M:Auth.API.Data.Repository.ISystemUserRepository.GetByUsername(System.String)"/>
        </member>
        <member name="M:Auth.API.Data.Repository.SystemUserRepository.Update(Auth.API.Entities.SystemUser)">
            <inheritdoc cref="M:Auth.API.Data.Repository.ISystemUserRepository.Update(Auth.API.Entities.SystemUser)"/>
        </member>
        <member name="M:Auth.API.Entities.SystemUser.usernameValidationRegex">
            <remarks>
            Pattern explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match a character in the set [-.0-9A-Z_a-z] atomically at least once.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Auth.API.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:Auth.API.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Auth.API.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Auth.API.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.usernameValidationRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the usernameValidationRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.usernameValidationRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.usernameValidationRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.usernameValidationRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.usernameValidationRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.usernameValidationRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.usernameValidationRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.usernameValidationRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.usernameValidationRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
