// <auto-generated />
using System;
using Landlot.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Landlot.API.Migrations
{
    [DbContext(typeof(LandlotDbContext))]
    [Migration("20230213184047_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Landlot.API.Entities.Land", b =>
                {
                    b.Property<Guid>("LandGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Culture")
                        .HasColumnType("int");

                    b.Property<int>("Drainage")
                        .HasColumnType("int");

                    b.Property<int>("LandClass")
                        .HasColumnType("int");

                    b.Property<int>("Municipality")
                        .HasColumnType("int");

                    b.Property<int>("Processing")
                        .HasColumnType("int");

                    b.Property<int>("Property")
                        .HasColumnType("int");

                    b.Property<string>("RealEstateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalArea")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Zone")
                        .HasColumnType("int");

                    b.HasKey("LandGuid");

                    b.ToTable("Lands");

                    b.HasData(
                        new
                        {
                            LandGuid = new Guid("3f84c3a3-34c2-48a0-93a1-f00af6c9b2ba"),
                            Culture = 1,
                            Drainage = 0,
                            LandClass = 2,
                            Municipality = 1,
                            Processing = 1,
                            Property = 2,
                            RealEstateNumber = "22",
                            TotalArea = 300m,
                            Zone = 3
                        },
                        new
                        {
                            LandGuid = new Guid("1f14c3a3-34c2-48a0-03a1-f00af6c9b2bb"),
                            Culture = 4,
                            Drainage = 0,
                            LandClass = 0,
                            Municipality = 0,
                            Processing = 1,
                            Property = 0,
                            RealEstateNumber = "1234",
                            TotalArea = 1111m,
                            Zone = 4
                        });
                });

            modelBuilder.Entity("Landlot.API.Entities.Lot", b =>
                {
                    b.Property<Guid>("LotGuid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ClassState")
                        .HasColumnType("int");

                    b.Property<int>("CultureState")
                        .HasColumnType("int");

                    b.Property<int>("DrainageState")
                        .HasColumnType("int");

                    b.Property<Guid>("LandGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("LotArea")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("LotNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("LotUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProcessingState")
                        .HasColumnType("int");

                    b.Property<int>("ProtectedZoneState")
                        .HasColumnType("int");

                    b.HasKey("LotGuid");

                    b.HasIndex("LandGuid");

                    b.ToTable("Lots");

                    b.HasData(
                        new
                        {
                            LotGuid = new Guid("67e0bcc7-db55-4726-8b3d-ee0dabed6de3"),
                            ClassState = 1,
                            CultureState = 1,
                            DrainageState = 0,
                            LandGuid = new Guid("3f84c3a3-34c2-48a0-93a1-f00af6c9b2ba"),
                            LotArea = 1234.56m,
                            LotNumber = 1,
                            LotUser = new Guid("3f84c3a3-34c2-48a0-93a1-f00af6c9b2bc"),
                            ProcessingState = 1,
                            ProtectedZoneState = 1
                        },
                        new
                        {
                            LotGuid = new Guid("61e0bcc1-db15-4726-8b3d-ee0dabed6de3"),
                            ClassState = 2,
                            CultureState = 0,
                            DrainageState = 0,
                            LandGuid = new Guid("1f14c3a3-34c2-48a0-03a1-f00af6c9b2bb"),
                            LotArea = 4321.12m,
                            LotNumber = 13,
                            LotUser = new Guid("1f14c3a3-34c2-48a0-03a1-f00af6c9b2bb"),
                            ProcessingState = 0,
                            ProtectedZoneState = 4
                        });
                });

            modelBuilder.Entity("Landlot.API.Entities.Lot", b =>
                {
                    b.HasOne("Landlot.API.Entities.Land", "Land")
                        .WithMany("Lots")
                        .HasForeignKey("LandGuid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Land");
                });

            modelBuilder.Entity("Landlot.API.Entities.Land", b =>
                {
                    b.Navigation("Lots");
                });
#pragma warning restore 612, 618
        }
    }
}
